import solution2024_8 as sol
import unittest as ut


class TwoAntennaOneFreqTestCase(ut.TestCase):
    def setUp(self):
        self.input = """
..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........
""".strip()
        self.output = """
..........
...#......
..........
....a.....
..........
.....a....
..........
......#...
..........
..........
""".strip()
        self.grid = sol.parse_input(self.input)

    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['a']))

    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 2)


class ThreeAntennaOneFreqTestCase(ut.TestCase):
    def setUp(self):
        self.input = """
..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........
""".strip()
        self.output = """
..........
...#......
#.........
....a.....
........a.
.....a....
..#.......
......#...
..........
..........
""".strip()
        self.grid = sol.parse_input(self.input)

    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['a']))

    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 4)


class FourAntennaTwoFreqTestCase(ut.TestCase):
    def setUp(self):
        self.input = """
..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
..........
""".strip()
        self.output = """
..........
...#......
#.........
....a.....
........a.
.....a....
..#.......
......A...
..........
..........
""".strip()
        self.grid = sol.parse_input(self.input)

    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['a', 'A']))

    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 4)


class ManyAntennaTwoFreqTestCase(ut.TestCase):
    def setUp(self):
        self.input = """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
""".strip()
        self.output = """
......#....#
...#....0...
....#0....#.
..#....0....
....0....#..
.#....A.....
...#........
#......#....
........A...
.........A..
..........#.
..........#.
""".strip()
        self.grid = sol.parse_input(self.input)


    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['0', 'A']))


    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 14)


class Pt2ThreeAntennaeOneFreq(ut.TestCase):
    def setUp(self):
        self.input = """
T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........
""".strip()
        self.output = """
T....#....
...T......
.T....#...
.........#
..#.......
..........
...#......
..........
....#.....
..........
""".strip()
        self.grid = sol.parse_input(self.input)


    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['T']))


    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes_pt2(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 9)


class Pt2ManyAntennaTwoFreqTestCase(ut.TestCase):
    def setUp(self):
        self.input = """
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
""".strip()
        self.output = """
##....#....#
.#.#....0...
..#.#0....#.
..##...0....
....0....#..
.#...#A....#
...#..#.....
#....#.#....
..#.....A...
....#....A..
.#........#.
...#......##
""".strip()
        self.grid = sol.parse_input(self.input)


    def test_parses_frequency(self):
        self.assertSetEqual(self.grid.freqs, set(['0', 'A']))


    def test_finds_antinodes(self):
        antinodes = sol.calculate_antinodes_pt2(self.grid)
        self.assertEqual(sol.render_antinodes(self.grid, antinodes), self.output)
        self.assertEqual(sol.count_antinodes(antinodes), 34)


if __name__ == '__main__':
    ut.main()